["^ ","~:output",["^ ","~:js","goog.provide('fipp.engine');\nif((typeof fipp !== 'undefined') && (typeof fipp.engine !== 'undefined') && (typeof fipp.engine.serialize_node !== 'undefined')){\n} else {\nfipp.engine.serialize_node = (function (){var method_table__4712__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4713__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4714__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4715__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4716__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__49634 = cljs.core.get_global_hierarchy;\nreturn (fexpr__49634.cljs$core$IFn$_invoke$arity$0 ? fexpr__49634.cljs$core$IFn$_invoke$arity$0() : fexpr__49634.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"fipp.engine\",\"serialize-node\"),cljs.core.first,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4716__auto__,method_table__4712__auto__,prefer_table__4713__auto__,method_cache__4714__auto__,cached_hierarchy__4715__auto__));\n})();\n}\nfipp.engine.serialize = (function fipp$engine$serialize(doc){\nif((doc == null)){\nreturn null;\n} else {\nif(cljs.core.seq_QMARK_(doc)){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(fipp.engine.serialize,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([doc], 0));\n} else {\nif(typeof doc === 'string'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),doc], null)], null);\n} else {\nif((doc instanceof cljs.core.Keyword)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [doc], null));\n} else {\nif(cljs.core.vector_QMARK_(doc)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(doc);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected class for doc node\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),doc], null));\n\n}\n}\n}\n}\n}\n});\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),(function (p__49639){\nvar vec__49646 = p__49639;\nvar seq__49647 = cljs.core.seq(vec__49646);\nvar first__49648 = cljs.core.first(seq__49647);\nvar seq__49647__$1 = cljs.core.next(seq__49647);\nvar _ = first__49648;\nvar text = seq__49647__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),(function (p__49655){\nvar vec__49656 = p__49655;\nvar seq__49657 = cljs.core.seq(vec__49656);\nvar first__49658 = cljs.core.first(seq__49657);\nvar seq__49657__$1 = cljs.core.next(seq__49657);\nvar _ = first__49658;\nvar text = seq__49657__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),(function (p__49663){\nvar vec__49664 = p__49663;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49664,(0),null);\nvar text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49664,(1),null);\nif(typeof text === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? text)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),text], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"span\",\"span\",1394872991),(function (p__49670){\nvar vec__49671 = p__49670;\nvar seq__49672 = cljs.core.seq(vec__49671);\nvar first__49673 = cljs.core.first(seq__49672);\nvar seq__49672__$1 = cljs.core.next(seq__49672);\nvar _ = first__49673;\nvar children = seq__49672__$1;\nreturn fipp.engine.serialize(children);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),(function (p__49674){\nvar vec__49684 = p__49674;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49684,(0),null);\nvar inline = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49684,(1),null);\nvar terminate = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49684,(2),null);\nvar inline__$1 = (function (){var or__4223__auto__ = inline;\nif(cljs.core.truth_(or__4223__auto__)){\nreturn or__4223__auto__;\n} else {\nreturn \" \";\n}\n})();\nvar terminate__$1 = (function (){var or__4223__auto__ = terminate;\nif(cljs.core.truth_(or__4223__auto__)){\nreturn or__4223__auto__;\n} else {\nreturn \"\";\n}\n})();\nif(typeof inline__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? inline)\"));\n}\n\nif(typeof terminate__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? terminate)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222),inline__$1,new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496),terminate__$1], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"break\",\"break\",126570225),(function() { \nvar G__49870__delegate = function (_){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"break\",\"break\",126570225)], null)], null);\n};\nvar G__49870 = function (var_args){\nvar _ = null;\nif (arguments.length > 0) {\nvar G__49871__i = 0, G__49871__a = new Array(arguments.length -  0);\nwhile (G__49871__i < G__49871__a.length) {G__49871__a[G__49871__i] = arguments[G__49871__i + 0]; ++G__49871__i;}\n  _ = new cljs.core.IndexedSeq(G__49871__a,0,null);\n} \nreturn G__49870__delegate.call(this,_);};\nG__49870.cljs$lang$maxFixedArity = 0;\nG__49870.cljs$lang$applyTo = (function (arglist__49872){\nvar _ = cljs.core.seq(arglist__49872);\nreturn G__49870__delegate(_);\n});\nG__49870.cljs$core$IFn$_invoke$arity$variadic = G__49870__delegate;\nreturn G__49870;\n})()\n);\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"group\",\"group\",582596132),(function (p__49719){\nvar vec__49722 = p__49719;\nvar seq__49723 = cljs.core.seq(vec__49722);\nvar first__49724 = cljs.core.first(seq__49723);\nvar seq__49723__$1 = cljs.core.next(seq__49723);\nvar _ = first__49724;\nvar children = seq__49723__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"end\",\"end\",-268185958)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),(function (p__49731){\nvar vec__49734 = p__49731;\nvar seq__49735 = cljs.core.seq(vec__49734);\nvar first__49736 = cljs.core.first(seq__49735);\nvar seq__49735__$1 = cljs.core.next(seq__49735);\nvar _ = first__49736;\nvar args = seq__49735__$1;\nvar vec__49741 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((2),args));\nvar seq__49742 = cljs.core.seq(vec__49741);\nvar first__49743 = cljs.core.first(seq__49742);\nvar seq__49742__$1 = cljs.core.next(seq__49742);\nvar offset = first__49743;\nvar children = seq__49742__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(function (p__49744){\nvar vec__49745 = p__49744;\nvar seq__49746 = cljs.core.seq(vec__49745);\nvar first__49747 = cljs.core.first(seq__49746);\nvar seq__49746__$1 = cljs.core.next(seq__49746);\nvar _ = first__49747;\nvar args = seq__49746__$1;\nvar vec__49748 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((0),args));\nvar seq__49749 = cljs.core.seq(vec__49748);\nvar first__49750 = cljs.core.first(seq__49749);\nvar seq__49749__$1 = cljs.core.next(seq__49749);\nvar offset = first__49750;\nvar children = seq__49749__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\n/**\n * A transducer which annotates the right-side of nodes assuming a\n *   hypothetical single-line formatting of the document. Groups and indentation\n *   directives are temporarily assumed to be zero-width. These values are used\n *   by subsequent passes to produce the final layout.\n */\nfipp.engine.annotate_rights = (function fipp$engine$annotate_rights(rf){\nvar pos = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__49873 = null;\nvar G__49873__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__49873__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__49873__2 = (function (res,node){\nvar delta = (function (){var G__49797 = new cljs.core.Keyword(null,\"op\",\"op\",-1882987955).cljs$core$IFn$_invoke$arity$1(node);\nvar G__49797__$1 = (((G__49797 instanceof cljs.core.Keyword))?G__49797.fqn:null);\nswitch (G__49797__$1) {\ncase \"text\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"line\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"escaped\":\nreturn (1);\n\nbreak;\ndefault:\nreturn (0);\n\n}\n})();\nvar p = pos.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(pos.cljs$core$IDeref$_deref$arity$1(null) + delta));\nvar G__49798 = res;\nvar G__49799 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),p);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__49798,G__49799) : rf.call(null,G__49798,G__49799));\n});\nG__49873 = function(res,node){\nswitch(arguments.length){\ncase 0:\nreturn G__49873__0.call(this);\ncase 1:\nreturn G__49873__1.call(this,res);\ncase 2:\nreturn G__49873__2.call(this,res,node);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__49873.cljs$core$IFn$_invoke$arity$0 = G__49873__0;\nG__49873.cljs$core$IFn$_invoke$arity$1 = G__49873__1;\nG__49873.cljs$core$IFn$_invoke$arity$2 = G__49873__2;\nreturn G__49873;\n})()\n});\nfipp.engine.update_right = (function fipp$engine$update_right(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___49880 = arguments.length;\nvar i__4830__auto___49881 = (0);\nwhile(true){\nif((i__4830__auto___49881 < len__4829__auto___49880)){\nargs__4835__auto__.push((arguments[i__4830__auto___49881]));\n\nvar G__49882 = (i__4830__auto___49881 + (1));\ni__4830__auto___49881 = G__49882;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((2) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((2)),(0),null)):null);\nreturn fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4836__auto__);\n});\n\n(fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic = (function (deque,f,args){\nreturn fipp.deque.conjr(cljs.core.pop(deque),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,cljs.core.peek(deque),args));\n}));\n\n(fipp.engine.update_right.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(fipp.engine.update_right.cljs$lang$applyTo = (function (seq49812){\nvar G__49813 = cljs.core.first(seq49812);\nvar seq49812__$1 = cljs.core.next(seq49812);\nvar G__49814 = cljs.core.first(seq49812__$1);\nvar seq49812__$2 = cljs.core.next(seq49812__$1);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__49813,G__49814,seq49812__$2);\n}));\n\n/**\n * Given printing options, returns a transducer which annotate the right-side\n *   of groups on their :begin nodes.  This includes the pruning algorithm which\n *   will annotate some :begin nodes as being :too-far to the right without\n *   calculating their exact sizes.\n */\nfipp.engine.annotate_begins = (function fipp$engine$annotate_begins(p__49830){\nvar map__49831 = p__49830;\nvar map__49831__$1 = cljs.core.__destructure_map(map__49831);\nvar options = map__49831__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49831__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar pos = cljs.core.volatile_BANG_((0));\nvar bufs = cljs.core.volatile_BANG_(fipp.deque.empty);\nreturn (function() {\nvar G__49883 = null;\nvar G__49883__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__49883__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__49883__2 = (function (res,p__49832){\nvar map__49833 = p__49832;\nvar map__49833__$1 = cljs.core.__destructure_map(map__49833);\nvar node = map__49833__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49833__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49833__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar buffers = cljs.core.deref(bufs);\nif(cljs.core.empty_QMARK_(buffers)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319))){\nvar position_STAR_ = (right + width);\nvar buffer = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),position_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null);\ncljs.core.vreset_BANG_(pos,position_STAR_);\n\ncljs.core.vreset_BANG_(bufs,(fipp.deque.create.cljs$core$IFn$_invoke$arity$1 ? fipp.deque.create.cljs$core$IFn$_invoke$arity$1(buffer) : fipp.deque.create.call(null,buffer)));\n\nreturn res;\n} else {\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,node) : rf.call(null,res,node));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"end\",\"end\",-268185958))){\nvar buffer = cljs.core.peek(buffers);\nvar buffers_STAR_ = cljs.core.pop(buffers);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),right], null);\nvar nodes = fipp.deque.conjlr(begin,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer),node);\nif(cljs.core.empty_QMARK_(buffers_STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res,nodes);\n} else {\nif(cljs.core.vector_QMARK_(buffers_STAR_)){\n} else {\nthrow (new Error(\"Assert failed: (vector? buffers*)\"));\n}\n\nif(cljs.core.vector_QMARK_(nodes)){\n} else {\nthrow (new Error(\"Assert failed: (vector? nodes)\"));\n}\n\ncljs.core.vreset_BANG_(bufs,fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers_STAR_,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.concat,nodes], 0)));\n\nreturn res;\n}\n} else {\nvar buffers_STAR_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)))?fipp.deque.conjr(buffers,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),(right + width),new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null)):fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.conjr,node], 0)));\nvar res__$1 = res;\nwhile(true){\nif((((right <= cljs.core.deref(pos))) && ((cljs.core.count(buffers_STAR_) <= width)))){\ncljs.core.vreset_BANG_(bufs,buffers_STAR_);\n\nreturn res__$1;\n} else {\nvar buffer = cljs.core.first(buffers_STAR_);\nvar buffers_STAR__STAR_ = fipp.deque.popl(buffers_STAR_);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)], null);\nvar res_STAR_ = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res__$1,begin) : rf.call(null,res__$1,begin));\nvar res_STAR___$1 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer));\nif(cljs.core.empty_QMARK_(buffers_STAR__STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn res_STAR___$1;\n} else {\ncljs.core.vreset_BANG_(pos,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912).cljs$core$IFn$_invoke$arity$1(cljs.core.first(buffers_STAR__STAR_)));\n\nvar G__49884 = buffers_STAR__STAR_;\nvar G__49885 = res_STAR___$1;\nbuffers_STAR_ = G__49884;\nres__$1 = G__49885;\ncontinue;\n}\n}\nbreak;\n}\n}\n}\n});\nG__49883 = function(res,p__49832){\nswitch(arguments.length){\ncase 0:\nreturn G__49883__0.call(this);\ncase 1:\nreturn G__49883__1.call(this,res);\ncase 2:\nreturn G__49883__2.call(this,res,p__49832);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__49883.cljs$core$IFn$_invoke$arity$0 = G__49883__0;\nG__49883.cljs$core$IFn$_invoke$arity$1 = G__49883__1;\nG__49883.cljs$core$IFn$_invoke$arity$2 = G__49883__2;\nreturn G__49883;\n})()\n});\n});\n/**\n * Given printing options, returns a transducer which produces the fully\n *   laid-out strings.\n */\nfipp.engine.format_nodes = (function fipp$engine$format_nodes(p__49845){\nvar map__49846 = p__49845;\nvar map__49846__$1 = cljs.core.__destructure_map(map__49846);\nvar options = map__49846__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49846__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar fits = cljs.core.volatile_BANG_((0));\nvar length = cljs.core.volatile_BANG_(width);\nvar tab_stops = cljs.core.volatile_BANG_(cljs.core.list((0)));\nvar column = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__49886 = null;\nvar G__49886__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__49886__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__49886__2 = (function (res,p__49847){\nvar map__49848 = p__49847;\nvar map__49848__$1 = cljs.core.__destructure_map(map__49848);\nvar node = map__49848__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49848__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49848__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar indent = cljs.core.peek(cljs.core.deref(tab_stops));\nvar format_text = (function (text,width__$1){\nvar res_STAR_ = (((cljs.core.deref(column) === (0)))?(function (){\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + indent));\n\nvar G__49849 = res;\nvar G__49850 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(indent,\" \"));\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__49849,G__49850) : rf.call(null,G__49849,G__49850));\n})()\n:res);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + width__$1));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res_STAR_,text) : rf.call(null,res_STAR_,text));\n});\nvar G__49851 = op;\nvar G__49851__$1 = (((G__49851 instanceof cljs.core.Keyword))?G__49851.fqn:null);\nswitch (G__49851__$1) {\ncase \"text\":\nvar text = new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node);\nreturn format_text(text,cljs.core.count(text));\n\nbreak;\ncase \"escaped\":\nreturn format_text(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node),(1));\n\nbreak;\ncase \"pass\":\nreturn format_text(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node),(0));\n\nbreak;\ncase \"line\":\nif((cljs.core.deref(fits) === (0))){\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nvar G__49852 = res;\nvar G__49853 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496).cljs$core$IFn$_invoke$arity$1(node)),\"\\n\"].join('');\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__49852,G__49853) : rf.call(null,G__49852,G__49853));\n} else {\nvar inline = new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + cljs.core.count(inline)));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,inline) : rf.call(null,res,inline));\n}\n\nbreak;\ncase \"break\":\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,\"\\n\") : rf.call(null,res,\"\\n\"));\n\nbreak;\ncase \"nest\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(indent + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"align\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(cljs.core.deref(column) + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"outdent\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.pop(tab_stops.cljs$core$IDeref$_deref$arity$1(null)));\n\nreturn res;\n\nbreak;\ncase \"begin\":\ncljs.core.vreset_BANG_(fits,(((cljs.core.deref(fits) > (0)))?(cljs.core.deref(fits) + (1)):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(right,new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)))?(0):(((right <= cljs.core.deref(length)))?(1):(0)\n))));\n\nreturn res;\n\nbreak;\ncase \"end\":\ncljs.core.vreset_BANG_(fits,(function (){var x__4306__auto__ = (0);\nvar y__4307__auto__ = (cljs.core.deref(fits) - (1));\nreturn ((x__4306__auto__ > y__4307__auto__) ? x__4306__auto__ : y__4307__auto__);\n})());\n\nreturn res;\n\nbreak;\ndefault:\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected node op\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node], null));\n\n}\n});\nG__49886 = function(res,p__49847){\nswitch(arguments.length){\ncase 0:\nreturn G__49886__0.call(this);\ncase 1:\nreturn G__49886__1.call(this,res);\ncase 2:\nreturn G__49886__2.call(this,res,p__49847);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__49886.cljs$core$IFn$_invoke$arity$0 = G__49886__0;\nG__49886.cljs$core$IFn$_invoke$arity$1 = G__49886__1;\nG__49886.cljs$core$IFn$_invoke$arity$2 = G__49886__2;\nreturn G__49886;\n})()\n});\n});\nfipp.engine.print_fns = (function fipp$engine$print_fns(options){\nvar map__49855 = options;\nvar map__49855__$1 = cljs.core.__destructure_map(map__49855);\nvar print_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__49855__$1,new cljs.core.Keyword(null,\"print-fn\",\"print-fn\",-1720960489),cljs.core._STAR_print_fn_STAR_);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"print\",\"print\",1299562414),print_fn,new cljs.core.Keyword(null,\"println\",\"println\",1920840330),(function (){\nvar _STAR_print_fn_STAR__orig_val__49856 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_fn_STAR__temp_val__49857 = print_fn;\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__49857);\n\ntry{return cljs.core.println();\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__49856);\n}})], null);\n});\nfipp.engine.pprint_document = (function fipp$engine$pprint_document(var_args){\nvar G__49859 = arguments.length;\nswitch (G__49859) {\ncase 1:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1 = (function (document){\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2(document,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2 = (function (document,options){\nvar options__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),(70)], null),options], 0));\nvar map__49860 = fipp.engine.print_fns(options__$1);\nvar map__49860__$1 = cljs.core.__destructure_map(map__49860);\nvar print = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49860__$1,new cljs.core.Keyword(null,\"print\",\"print\",1299562414));\nvar println = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49860__$1,new cljs.core.Keyword(null,\"println\",\"println\",1920840330));\ncljs.core.run_BANG_(print,cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.engine.annotate_rights,fipp.engine.annotate_begins(options__$1),fipp.engine.format_nodes(options__$1),fipp.engine.serialize(document)], 0)));\n\nreturn (println.cljs$core$IFn$_invoke$arity$0 ? println.cljs$core$IFn$_invoke$arity$0() : println.call(null));\n}));\n\n(fipp.engine.pprint_document.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","~:file","fipp/engine.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$fipp.engine","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$fipp.deque","^P","~$deque","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^K","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing",["^Y",["^U",["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","fipp/engine.cljc"],"~:compiled-at",1624616764361,"~:resource-name","fipp/engine.cljc","~:warnings",[],"~:source","(ns fipp.engine\n  \"See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing\"\n  (:require [fipp.deque :as deque])\n  #?(:clj (:import (java.io Writer))))\n\n\n;;; Serialize document into a stream\n\n(defmulti serialize-node first)\n\n(defn serialize [doc]\n  (cond\n    (nil? doc) nil\n    (seq? doc) (mapcat serialize doc)\n    (string? doc) [{:op :text, :text doc}]\n    (keyword? doc) (serialize-node [doc])\n    (vector? doc) (serialize-node doc)\n    :else (throw (ex-info \"Unexpected class for doc node\" {:node doc}))))\n\n;; Primitives\n;; See doc/primitives.md for details.\n\n(defmethod serialize-node :text [[_ & text]]\n  [{:op :text, :text (apply str text)}])\n\n(defmethod serialize-node :pass [[_ & text]]\n  [{:op :pass, :text (apply str text)}])\n\n(defmethod serialize-node :escaped [[_ text]]\n  (assert (string? text))\n  [{:op :escaped, :text text}])\n\n(defmethod serialize-node :span [[_ & children]]\n  (serialize children))\n\n(defmethod serialize-node :line [[_ inline terminate]]\n  (let [inline (or inline \" \")\n        terminate (or terminate \"\")]\n    (assert (string? inline))\n    (assert (string? terminate))\n    [{:op :line, :inline inline, :terminate terminate}]))\n\n(defmethod serialize-node :break [& _]\n  [{:op :break}])\n\n(defmethod serialize-node :group [[_ & children]]\n  (concat [{:op :begin}] (serialize children) [{:op :end}]))\n\n(defmethod serialize-node :nest [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                              args\n                              (cons 2 args))]\n    (concat [{:op :nest, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n(defmethod serialize-node :align [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                             args\n                             (cons 0 args))]\n    (concat [{:op :align, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n\n\n(defn annotate-rights\n  \"A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.\"\n  [rf]\n  (let [pos (volatile! 0)]\n    (fn\n      ([] (rf))\n      ([res] (rf res))\n      ([res node]\n       (let [delta (case (:op node)\n                     :text (count (:text node))\n                     :line (count (:inline node))\n                     :escaped 1\n                     0)\n             p (vswap! pos + delta)]\n         (rf res (assoc node :right p)))))))\n\n\n\n(defn update-right [deque f & args]\n  (deque/conjr (pop deque) (apply f (peek deque) args)))\n\n(defn annotate-begins\n  \"Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [pos (volatile! 0)\n          bufs (volatile! deque/empty)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [buffers @bufs]\n           (if (empty? buffers)\n             (if (= op :begin)\n               ;; Buffer groups\n               (let [position* (+ right width)\n                     buffer {:position position* :nodes deque/empty}]\n                 (vreset! pos position*)\n                 (vreset! bufs (deque/create buffer))\n                 res)\n               ;; Emit unbuffered\n               (rf res node))\n             (if (= op :end)\n               ;; Pop buffer\n               (let [buffer (peek buffers)\n                     buffers* (pop buffers)\n                     begin {:op :begin :right right}\n                     nodes (deque/conjlr begin (:nodes buffer) node)]\n                 (if (empty? buffers*)\n                   (do\n                     (vreset! pos 0)\n                     (vreset! bufs deque/empty)\n                     (reduce rf res nodes))\n                   (do\n                     (assert (vector? buffers*))\n                     (assert (vector? nodes))\n                     (vreset! bufs (update-right buffers* update-in [:nodes]\n                                                 deque/concat nodes))\n                     res)))\n               ;; Pruning lookahead\n               (loop [buffers* (if (= op :begin)\n                                 (deque/conjr buffers\n                                              {:position (+ right width)\n                                               :nodes deque/empty})\n                                 (update-right buffers update-in [:nodes]\n                                               deque/conjr node))\n                      res res]\n                 (if (and (<= right @pos) (<= (count buffers*) width))\n                   ;; Not too far\n                   (do (vreset! bufs buffers*)\n                       res)\n                   ;; Too far\n                   (let [buffer (first buffers*)\n                         buffers** (deque/popl buffers*)\n                         begin {:op :begin, :right :too-far}\n                         res* (rf res begin)\n                         res* (reduce rf res* (:nodes buffer))]\n                     (if (empty? buffers**)\n                       ;; Root buffered group\n                       (do\n                         (vreset! pos 0)\n                         (vreset! bufs deque/empty)\n                         res*)\n                       ;; Interior group\n                       (do\n                         (vreset! pos (:position (first buffers**)))\n                         (recur buffers** res*))))))\n            ))))))))\n\n\n(defn format-nodes\n  \"Given printing options, returns a transducer which produces the fully\n  laid-out strings.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [fits (volatile! 0)\n          length (volatile! width)\n          tab-stops (volatile! '(0)) ; Technically, an unbounded stack...\n          column (volatile! 0)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [indent (peek @tab-stops)\n               format-text (fn [text width]\n                             (let [res* (if (zero? @column)\n                                          (do (vswap! column + indent)\n                                              (rf res (apply str (repeat indent \\space))))\n                                          res)]\n                               (vswap! column + width)\n                               (rf res* text)))]\n           (case op\n             :text\n               (let [text (:text node)]\n                 (format-text text (count text)))\n\n             :escaped\n               (format-text (:text node) 1)\n\n             :pass\n               (format-text (:text node) 0)\n\n             :line\n               (if (zero? @fits)\n                 (do\n                   (vreset! length (- (+ right width) indent))\n                   (vreset! column 0)\n                   (rf res (str (:terminate node) \"\\n\")))\n                 (let [inline (:inline node)]\n                   (vswap! column + (count inline))\n                   (rf res inline)))\n             :break\n               (do\n                 (vreset! length (- (+ right width) indent))\n                 (vreset! column 0)\n                 (rf res \"\\n\"))\n             :nest\n               (do (vswap! tab-stops conj (+ indent (:offset node)))\n                   res)\n             :align\n               (do (vswap! tab-stops conj (+ @column (:offset node)))\n                   res)\n             :outdent\n               (do (vswap! tab-stops pop)\n                   res)\n             :begin\n               (do (vreset! fits (cond\n                                   (pos? @fits) (inc @fits)\n                                   (= right :too-far) 0\n                                   (<= right @length) 1\n                                   :else 0))\n                   res)\n             :end\n               (do (vreset! fits (max 0 (dec @fits)))\n                   res)\n             (throw (ex-info \"Unexpected node op\" {:node node}))))\n         )))))\n\n\n(defn print-fns\n  [options]\n  #?(:clj (let [{:keys [^Writer writer] :or {writer *out*}} options]\n            {:print #(.write writer ^String %)\n             :println (fn []\n                        (binding [*out* writer]\n                          (println)))})\n     :cljs (let [{:keys [print-fn] :or {print-fn *print-fn*}} options]\n             {:print print-fn\n              :println (fn []\n                         (binding [*print-fn* print-fn]\n                           (println)))})))\n\n\n(defn pprint-document\n  ([document]\n   (pprint-document document {}))\n  ([document options]\n   (let [options (merge {:width 70} options)\n         {:keys [print println]} (print-fns options)]\n     (->> (serialize document)\n          (eduction\n            annotate-rights\n            (annotate-begins options)\n            (format-nodes options))\n          (run! print))\n     (println))))\n\n\n(comment\n\n  (defn dbg [x]\n    (println \"DBG:\")\n    (clojure.pprint/pprint x)\n    (println \"----\")\n    x)\n\n  (serialize \"apple\")\n  (serialize [:text \"apple\" \"ball\"])\n  (serialize [:span \"apple\" [:group \"ball\" :line \"cat\"]])\n  (serialize [:span \"apple\" [:line \",\"] \"ball\"])\n\n  (def doc1 [:group \"A\" :line [:group \"B\" :line \"C\"]])\n  (def doc2 [:group \"A\" :line [:nest 2 \"B\" :line \"C\"] :line \"D\"])\n  (def doc3 [:group \"A\" :line\n             [:nest 2 \"B-XYZ\" [:align -3 :line \"C\"]] :line \"D\"])\n\n  (serialize doc1)\n\n  (let [options {:width 3}]\n    (->> doc3\n         serialize\n         (into [] (comp\n                    annotate-rights\n                    (annotate-begins options)\n                    (format-nodes options)\n                    ))\n         ;(run! print)\n         clojure.pprint/pprint\n         )\n    ;nil\n    )\n\n  ;; test of :pass op\n  (do\n    (pprint-document\n      [:group \"AB\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group \"<AB>\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group [:pass \"<\"] \"AB\" [:pass \">\"] :line \"B\" :line \"C\"]\n      {:width 6}))\n\n  (def ex1\n    [:group \"[\"\n        [:nest 2\n            [:line \"\"] \"0,\"\n            :line \"1,\"\n            :line \"2,\"\n            :line \"3\"\n            [:line \"\"]]\n        \"]\"])\n\n  (pprint-document ex1 {:width 20})\n  (pprint-document ex1 {:width 6})\n\n  (def ex2\n    [:span \"[\"\n        [:align\n            [:group [:line \"\"]] \"0,\"\n            [:group :line] \"1,\"\n            [:group :line] \"2,\"\n            [:group :line] \"3\"]\n        \"]\"])\n\n  (pprint-document ex2 {:width 20})\n  (pprint-document ex2 {:width 6})\n\n)\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/fipp","js/fipp.engine","js/fipp.engine.serialize-node","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","cljs.core.get","fexpr__49634","cljs.core/MultiFn","cljs.core.symbol","fipp.engine/serialize-node","cljs.core/first","fipp.engine/serialize","doc","cljs.core/seq?","cljs.core.mapcat","cljs.core/Keyword","cljs.core/vector?","cljs.core.ex_info","p__49639","vec__49646","seq__49647","cljs.core/seq","first__49648","cljs.core/next","_","text","cljs.core.apply","cljs.core/str","p__49655","vec__49656","seq__49657","first__49658","p__49663","vec__49664","cljs.core.nth","js/Error","p__49670","vec__49671","seq__49672","first__49673","children","p__49674","vec__49684","inline","terminate","or__4223__auto__","p__49719","vec__49722","seq__49723","first__49724","cljs.core.concat","p__49731","vec__49734","seq__49735","first__49736","args","vec__49741","seq__49742","first__49743","offset","cljs.core/cons","p__49744","vec__49745","seq__49746","first__49747","vec__49748","seq__49749","first__49750","fipp.engine/annotate-rights","rf","pos","cljs.core/volatile!","res","node","delta","G__49797","cljs.core/count","p","G__49798","G__49799","cljs.core.assoc","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","fipp.engine/update-right","seq49812","G__49813","G__49814","self__4816__auto__","deque","f","fipp.deque/conjr","cljs.core/pop","cljs.core/peek","p__49830","map__49831","cljs.core/--destructure-map","fipp.engine/annotate-begins","width","options","bufs","fipp.deque/empty","p__49832","map__49833","op","right","cljs.core/deref","buffers","cljs.core/empty?","cljs.core._EQ_","position*","buffer","cljs.core/vreset!","fipp.deque/create","buffers*","begin","nodes","fipp.deque/conjlr","cljs.core.reduce","fipp.engine.update_right","cljs.core/update-in","fipp.deque/concat","buffers**","fipp.deque/popl","res*","p__49845","map__49846","fipp.engine/format-nodes","fits","length","tab-stops","column","p__49847","map__49848","indent","format-text","G__49849","G__49850","cljs.core.repeat","G__49851","G__49852","G__49853","cljs.core.conj","x__4306__auto__","y__4307__auto__","fipp.engine/print-fns","map__49855","print-fn","cljs.core/*print-fn*","*print-fn*-orig-val__49856","*print-fn*-temp-val__49857","cljs.core/println","G__49859","fipp.engine/pprint-document","document","fipp.engine.pprint_document","map__49860","cljs.core.merge","print","println","cljs.core.eduction","cljs.core/run!"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$cljs.core/str","~$cljs.core/MultiFn","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/IndexedSeq","~$cljs.core/-deref","~$fipp.engine/print-fns","~$fipp.deque/conjlr","~$cljs.core/count","~$cljs.core/deref","~$fipp.deque/conjr","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/Keyword","~$js/fipp.engine.serialize-node","~$cljs.core/vreset!","~$fipp.engine/serialize-node","~$cljs.core/atom","~$cljs.core/concat","~$cljs.core/pop","~$cljs.core/empty?","~$fipp.deque/popl","~$js/fipp.engine","~$cljs.core/conj","~$cljs.core/run!","~$cljs.core/peek","~$cljs.core/volatile!","~$fipp.engine/pprint-document","~$cljs.core/-add-method","~$cljs.core/get","~$js/fipp","~$cljs.core/-vreset!","~$cljs.core/symbol","~$fipp.engine/format-nodes","~$fipp.deque/concat","~$cljs.core/nth","~$cljs.core/ex-info","~$fipp.engine/serialize","~$cljs.core/println","~$fipp.engine/update-right","~$fipp.engine/annotate-rights","~$cljs.core/next","~$cljs.core/*print-fn*","~$cljs.core/cons","~$cljs.core/assoc","~$fipp.deque/create","~$cljs.core/repeat","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/eduction","~$cljs.core/merge","~$cljs.core/update-in","~$fipp.deque/empty","~$js/Error","~$fipp.engine/annotate-begins"]]],"~:cache-keys",["~#cmap",[["^14","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^14","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^14","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2Y"]]],["^14","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V"]]],["^14","clojure/core/rrb_vector/rrbt.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","~$clojure.core.rrb-vector.protocols","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^14","clojure/core/rrb_vector.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","^34","~$clojure.core.rrb-vector.rrbt","~$clojure.core.rrb-vector.interop"]]],["^14","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","clojure/core/rrb_vector/trees.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","^35"]]],["^14","clojure/core/rrb_vector/nodes.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R"]]],["^14","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","fipp/deque.cljc"],["c3dab4003e436d9133e8194afe57d1aea8cfcb4d","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","~$clojure.core.rrb-vector"]]],["^14","fipp/engine.cljc"],["c3dab4003e436d9133e8194afe57d1aea8cfcb4d","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","^P"]]],["^14","clojure/core/rrb_vector/transients.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","^35","^36"]]],["^14","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V"]]],"~:SHADOW-TIMESTAMP",[1624356658000,1624356658000,1624356662000],["^14","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","~$goog.reflect"]]],["^14","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","~$goog.fs.blob","^2Z","~$goog.html.SafeScript","~$goog.html.trustedtypes","^30","^31","^32","^33"]]],["^14","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U","^2V","~$goog.html.SafeUrl","^32","^33","^2Y"]]],["^14","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3>","~$goog.html.SafeStyle","^3@","^2[","~$goog.html.uncheckedconversions","^32","^2Y"]]],["^14","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U","^2V","~$goog.dom.TagName","~$goog.dom.tags","^3>","^3D","~$goog.html.SafeStyleSheet","^3@","^2[","^3?","^30","^31","~$goog.labs.userAgent.browser","^2X","^32","^33","^2Y"]]],["^14","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2X"]]],["^14","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U"]]],["^14","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U","^2V","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",[]]],["^14","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U","^2X"]]],["^14","clojure/core/rrb_vector/interop.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R","^34","^38"]]],["^14","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","~$goog.dom.safe","^3E","^32","^2Y"]]],["^14","clojure/core/rrb_vector/protocols.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^R"]]],["^14","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2Y"]]],["^14","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2U","^2V","^3B","~$goog.math"]]],["^14","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","^3C","^3>","^3D","^3J","^3@","^2[","^32","^2Y","^30"]]],["^14","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S"]]],["^14","cljs/core.cljs"],["645bb313ccc09b5f580336ae2a5f49212af9e8ea","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","~$goog.math.Long","~$goog.math.Integer","^3N","^2X","^2U","~$goog.Uri","~$goog.string.StringBuffer"]]],["^14","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^32","^33","^3?","^2V"]]],["^14","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^32","^3D","^33","^2U","^2X","^2V","^2Y"]]],["^14","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^3<"]]],["^14","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","^3N"]]],["^14","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2P",["^ ","^2Q",null,"^2R",["^I",[]],"^2S",["^S","^2V","^33"]]]]],"~:clj-info",["^ ","jar:file:/home/hp/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1624356667000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer/passes.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer/passes/and_or.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/env.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/instant.clj",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/source_map/base64_vlq.clj",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/tagged_literals.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/source_map.clj",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1624356667000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer/impl.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/js_deps.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/data.json/2.3.1/data.json-2.3.1.jar!/clojure/data/json.clj",1624356633000,"jar:file:/home/hp/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1624356667000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/core.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1624356667000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1624356667000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/source_map/base64.clj",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/util.cljc",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/core.rrb-vector/0.1.1/core.rrb-vector-0.1.1.jar!/clojure/core/rrb_vector/macros.clj",1624356667000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/externs.clj",1624356662000,"jar:file:/home/hp/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1624352849000,"jar:file:/home/hp/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/compiler.cljc",1624356662000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","^7","fipp/engine.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^I",["^U"]],"~:shadow/js-access-global",["^I",["Error"]],"^V",null,"~:defs",["^ ","~$serialize-node",["^ ","^J","^1S","^7","fipp/engine.cljc","^8",10,"^9",1,"^:",10,"^;",25,"^5",["^ ","^7","fipp/engine.cljc","^8",10,"^9",11,"^:",10,"^;",25],"~:tag","^1C"],"~$serialize",["^ ","~:protocol-inline",null,"^5",["^ ","^7","fipp/engine.cljc","^8",12,"^9",7,"^:",12,"^;",16,"~:arglists",["^Y",["~$quote",["^Y",[["~$doc"]]]]]],"^J","^2<","^7","fipp/engine.cljc","^;",16,"~:method-params",["^Y",[["^4U"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^9",1,"~:variadic?",false,"^8",12,"~:ret-tag",["^I",["~$cljs.core/IVector","~$any","~$clj-nil"]],"^:",12,"~:max-fixed-arity",1,"~:fn-var",true,"^4S",["^Y",["^4T",["^Y",[["^4U"]]]]]],"~$annotate-rights",["^ ","^4R",null,"^5",["^ ","^7","fipp/engine.cljc","^8",68,"^9",7,"^:",68,"^;",22,"^4S",["^Y",["^4T",["^Y",[["~$rf"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"^J","^2?","^7","fipp/engine.cljc","^;",22,"^4V",["^Y",[["^55"]]],"^4W",null,"^4X",["^Y",[null,null]],"^9",1,"^4Y",false,"^8",68,"^4Z","~$function","^:",68,"^52",1,"^53",true,"^4S",["^Y",["^4T",["^Y",[["^55"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"~$update-right",["^ ","^4R",null,"^5",["^ ","^7","fipp/engine.cljc","^8",89,"^9",7,"^:",89,"^;",19,"^4S",["^Y",["^4T",["^Y",[["^Q","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^4Y",true,"~:fixed-arity",2,"^52",2,"^4V",[["^Y",["^Q","~$f","^58"]]],"^4S",["^Y",[["^Q","~$f","~$&","^58"]]],"^4X",["^Y",[null]]]],"^J","^2>","^7","fipp/engine.cljc","^;",19,"^59",["^ ","^4Y",true,"^5:",2,"^52",2,"^4V",[["^Y",["^Q","~$f","^58"]]],"^4S",["^Y",[["^Q","~$f","~$&","^58"]]],"^4X",["^Y",[null]]],"^4V",[["^Y",["^Q","~$f","^58"]]],"^4W",null,"^5:",2,"^4X",["^Y",[null]],"^9",1,"^4Y",true,"~:methods",[["^ ","^5:",2,"^4Y",true,"^4P","^50"]],"^8",89,"^4Z","^50","^:",89,"^52",2,"^53",true,"^4S",["^Y",[["^Q","~$f","~$&","^58"]]]],"~$annotate-begins",["^ ","^4R",null,"^5",["^ ","^7","fipp/engine.cljc","^8",92,"^9",7,"^:",92,"^;",22,"^4S",["^Y",["^4T",["^Y",[[["^ ","~:keys",["~$width"],"^[","~$options"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"^J","^2M","^7","fipp/engine.cljc","^;",22,"^4V",["^Y",[["~$p__49830"]]],"^4W",null,"^4X",["^Y",[null,null]],"^9",1,"^4Y",false,"^8",92,"^4Z","^56","^:",92,"^52",1,"^53",true,"^4S",["^Y",["^4T",["^Y",[[["^ ","^5=",["^5>"],"^[","^5?"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"~$format-nodes",["^ ","^4R",null,"^5",["^ ","^7","fipp/engine.cljc","^8",164,"^9",7,"^:",164,"^;",19,"^4S",["^Y",["^4T",["^Y",[[["^ ","^5=",["^5>"],"^[","^5?"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"^J","^28","^7","fipp/engine.cljc","^;",19,"^4V",["^Y",[["~$p__49845"]]],"^4W",null,"^4X",["^Y",[null,null]],"^9",1,"^4Y",false,"^8",164,"^4Z","^56","^:",164,"^52",1,"^53",true,"^4S",["^Y",["^4T",["^Y",[[["^ ","^5=",["^5>"],"^[","^5?"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"~$print-fns",["^ ","^4R",null,"^5",["^ ","^7","fipp/engine.cljc","^8",233,"^9",7,"^:",233,"^;",16,"^4S",["^Y",["^4T",["^Y",[["^5?"]]]]]],"^J","^1H","^7","fipp/engine.cljc","^;",16,"^4V",["^Y",[["^5?"]]],"^4W",null,"^4X",["^Y",[null,null]],"^9",1,"^4Y",false,"^8",233,"^4Z","~$cljs.core/IMap","^:",233,"^52",1,"^53",true,"^4S",["^Y",["^4T",["^Y",[["^5?"]]]]]],"~$pprint-document",["^ ","^4R",null,"^5",["^ ","^7","fipp/engine.cljc","^8",247,"^9",7,"^:",247,"^;",22,"^4S",["^Y",["^4T",["^Y",[["~$document"],["^5F","^5?"]]]]],"^59",["^ ","^4Y",false,"^5:",2,"^52",2,"^4V",[["^5F"],["^5F","^5?"]],"^4S",["^Y",[["^5F"],["^5F","^5?"]]],"^4X",["^Y",[null,null]]]],"^J","^22","^7","fipp/engine.cljc","^;",22,"^59",["^ ","^4Y",false,"^5:",2,"^52",2,"^4V",[["^5F"],["^5F","^5?"]],"^4S",["^Y",[["^5F"],["^5F","^5?"]]],"^4X",["^Y",[null,null]]],"^4V",[["^5F"],["^5F","^5?"]],"^4W",null,"^5:",2,"^4X",["^Y",[null,null]],"^9",1,"^4Y",false,"^5;",[["^ ","^5:",1,"^4Y",false,"^4P","^50"],["^ ","^5:",2,"^4Y",false,"^4P","^50"]],"^8",247,"^:",247,"^52",2,"^53",true,"^4S",["^Y",[["^5F"],["^5F","^5?"]]]]],"^W",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^I",["~:nest","~:align","~:outdent","~:group","~:else","~:offset","~:default","~:terminate","~:too-far","~:println","~:width","^L","~:node","~:print","~:begin","~:break","~:nodes","^8","~:print-fn","~:right","~:escaped","~:position","~:pass","~:end","~:hierarchy","~:inline","~:text","~:span"]],"~:order",["^62","^5N","^L","^64","^5L","^5S","^60","^5Z","^65","^8","^63","^5O","^5V","^5K","^5U","^61","^5H","^5M","^5J","^5I","^5Y","^5R","^5[","^5W","^5P","^5X","^5T","^5Q"]],"^10",["^ ","^U",["^I",[]]],"^11",["^ "],"^12",["^S","^R","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2O",[["^69","~:static-fns"],true,["^69","~:shadow-tweaks"],null,["^69","~:source-map-inline"],null,["^69","~:elide-asserts"],false,["^69","~:optimize-constants"],null,["^69","^17"],null,["^69","~:external-config"],null,["^69","~:tooling-config"],null,["^69","~:emit-constants"],null,["^69","~:load-tests"],null,["^69","~:form-size-threshold"],null,["^69","~:data-readers"],null,["^69","~:infer-externs"],"~:auto",["^69","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^69","~:fn-invoke-direct"],null,["^69","~:source-map"],"/dev/null"]]]